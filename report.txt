Project Report
1. Introduction
This project is designed to construct a “spatio-temporal” image (STI) which can find and characterize video transitions. Three different methods are tried to carry out the construction of STI. The first method is to copy pixels from the middle column (or row) to the STI. In another method, the chromaticity histogram is established for each frame to demonstrate the distribution of color. The next step is to compute intersections between previous histogram and current histogram. In addition, the threshold version of histogram intersections is implemented. The language used in this program is C++ and the main library used is opencv2. 
2. STI Construction Methods
2.1 Copying Pixels
The first approach is copying the pixels directly from each frame’s middle column or row to the target STI.
1. Pseudocode
1.	For each frame
2.	 	Copying the middle column of frame to the STI_C
3.	     Copying the middle row of frame to the STI_R and side away
4.		Display the STI_C, STI_R

The STI_C has the same number of rows as does the original video frame and the column number equal to the number of frames in the video. The STI_R has the same number of rows as the number of columns in the original video frame and the number of columns equal to the number of frames in the video.
2.2 Histogram Intersection
The second approach is constructing a chromaticity histogram for each column or row of each frame and comparing it to the previous frame’s column at the same location and then adding up the smaller one to the STI.
1. Pseudocode
1.	For each frame
2.	   For each row or column or row
3.	      Generate previous chromaticity histogram
4.	      Generate current chromaticity histogram
5.	      Compare previous and current histogram and add the smaller
       one to the intersection sum
6.	   Divide the intersection sum by the number of columns or rows
7.	   Copy the value of intersection sum of each frame to STI_H
8.	Display the STI_H

The STI_H has the same number of rows as the number of columns in the original video frame and the number of columns equal to the number of frames in the video.



2.3 Histogram Intersection with Threshold
The third approach is based on the second method but added a boundary condition on the intersection value. We set the boundary to be 0.3.
1. Pseudocode
1.	For each frame
2.	   /the same as histogram intersection/
3.	   If the intersection sum is smaller than the threshold then set it to 0
4.	   Else set it to 1
5.	   Copy the value of intersection sum of each frame to STI_HI
6.	Display the STI_HI

The STI_HI has the same number of rows as the number of columns in the original video frame and the number of columns equal to the number of frames in the video.
3. Test result
To test the actual performance of each method, a MPEG video with 640*360 pixels per frame is wiped manually and the correcness will be measured.
3.1 Copying pixels
Figure (a) is the result of copying pixels from the middle column and Figure (b) is the result of copying pixels from the middle row and side away. From two figures, we find that the widths of two are identical corresponding to the same number of frames. Due to nice quality of video, both column and row copying clearly show the abrupt transition of the video.
3.2 Histogram intersection
Figure (c) is the result of doing histogram intersection for each column of each frame and Figure (b) is the result of doing histogram intersection for each row of each frame. Similarly the widths of two figures are the same as the number of frames. Figure (c) shows a cleaner output compared to the copying ones and provides a clean sets of zero values down a straight diagonal. However, the result of histogram intersection on rows is quite bad and useless for us to find the wipe. We think the uselessness of row intersection depends on the actual direction of wipe in the video.
3.3 Histogram intersection with threshold
Figure (e), (f) and (g) is the result of doing histogram intersection for each column of each frame with threshold holds on 0.3, 0.9 and 0.7 and Figure (h) is the result of doing histogram intersection for each row of each frame with threshold on 0.3. Similarly the widths of these figures are the same as the number of frames. To investigate the relationship between the result and the threshold, we tried different thresholds in the range of [0.01,1]. Comparing the first three figures, we find that threshold around 0.7 has the relative best performance.

3.4 Discussion
Three conclusions are generated after discussion. The direction of object transition in video will influence the effect of STI. A column-based STI construction menthod performs better if objects in video move vertically. Video's quality and noise factor will lead to different performance of copying pixels method. With bad quality or big noise factor, STI produced by copying pixels can not show a clear transition of video. The last conclusion is that the threshold version has the best performance but it is crucial to select an appropriate threshold to implementation.

4. Solved problems
When the program is ran, the control desk always shows the following sentence.  “first frame is no keyframe”

After some research, the reason is found to the "key frame" technology used by OpenCV. This technologty decodes video when reading some high compression video format like MPEG. It will skip some frames at the beginning to find the first key frame. In the beginning of the implementation, the function VideoCapture::set(CV_CAP_PROP_POS_FRAMES ) is used to set the index of next frame. According to this reason, this function will lost several (approximately 10) frames while trying to capture next frame. Consequently, the code is modified to store the previous frame in amtrix variable so the program can read frames from video in sequence.



